# Generated by Django 4.2.10 on 2025-05-01 10:36

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('enumerator', 'Enumerator')], default='enumerator', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Farm',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('owner_name', models.CharField(max_length=255)),
                ('size_ha', models.DecimalField(decimal_places=2, help_text='Size in hectares', max_digits=10)),
                ('location', models.TextField(blank=True, help_text='Location description', null=True)),
                ('boundary_geo', models.JSONField(blank=True, help_text='GeoJSON polygon representing farm boundary', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WaterSample',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sample_date', models.DateField()),
                ('source', models.CharField(help_text='Water source description (e.g., river, well, irrigation)', max_length=255)),
                ('pH', models.DecimalField(decimal_places=2, help_text='pH level (0-14)', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(14)])),
                ('turbidity', models.DecimalField(blank=True, decimal_places=2, help_text='Turbidity level in NTU', max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('notes', models.TextField(blank=True, null=True)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='water_samples/%Y/%m/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='water_samples', to='api.farm')),
            ],
            options={
                'verbose_name': 'Water Sample',
                'verbose_name_plural': 'Water Samples',
                'ordering': ['-sample_date'],
            },
        ),
        migrations.CreateModel(
            name='SoilSample',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sample_date', models.DateField()),
                ('pH', models.DecimalField(decimal_places=2, help_text='pH level (0-14)', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(14)])),
                ('moisture_pct', models.DecimalField(blank=True, decimal_places=2, help_text='Moisture percentage (0-100)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('nutrient_n', models.DecimalField(blank=True, decimal_places=2, help_text='Nitrogen level', max_digits=6, null=True)),
                ('nutrient_p', models.DecimalField(blank=True, decimal_places=2, help_text='Phosphorus level', max_digits=6, null=True)),
                ('nutrient_k', models.DecimalField(blank=True, decimal_places=2, help_text='Potassium level', max_digits=6, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='soil_samples/%Y/%m/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='soil_samples', to='api.farm')),
            ],
            options={
                'verbose_name': 'Soil Sample',
                'verbose_name_plural': 'Soil Samples',
                'ordering': ['-sample_date'],
            },
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('date_assigned', models.DateField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('complete', 'Complete')], default='pending', max_length=20)),
                ('assigned_to', models.ForeignKey(limit_choices_to={'role': 'enumerator'}, on_delete=django.db.models.deletion.CASCADE, related_name='routes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date_assigned'],
            },
        ),
        migrations.CreateModel(
            name='PestDiseaseReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_date', models.DateField()),
                ('category', models.CharField(choices=[('pest', 'Pest'), ('disease', 'Disease')], default='pest', max_length=20)),
                ('name', models.CharField(help_text='Name of the pest or disease', max_length=255)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='pest_disease/%Y/%m/')),
                ('location_lat', models.DecimalField(blank=True, decimal_places=6, help_text='GPS latitude', max_digits=9, null=True)),
                ('location_lng', models.DecimalField(blank=True, decimal_places=6, help_text='GPS longitude', max_digits=9, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pest_disease_reports', to='api.farm')),
            ],
            options={
                'verbose_name': 'Pest/Disease Report',
                'verbose_name_plural': 'Pest/Disease Reports',
                'ordering': ['-report_date'],
            },
        ),
        migrations.AddField(
            model_name='farm',
            name='route',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='farms', to='api.route'),
        ),
        migrations.CreateModel(
            name='Crop',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('crop_type', models.CharField(max_length=100)),
                ('variety', models.CharField(blank=True, max_length=100, null=True)),
                ('planting_date', models.DateField()),
                ('expected_harvest', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crops', to='api.farm')),
            ],
            options={
                'ordering': ['-planting_date'],
            },
        ),
    ]
